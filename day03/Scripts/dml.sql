-- PARENT
-- ID(pk), 이름, 나이, 주소, 핸드폰, 성별

CREATE SEQUENCE SEQ_PARENT;
CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_CARD PRIMARY KEY,
   PARENT_NAME VARCHAR2(255) NOT NULL,
   PARENT_AGE NUMBER,
   PARENT_ADDRESS VARCHAR2(255) NOT NULL,
   PARENT_PHONE VARCHAR2(255),
   PARENT_GENDER CHAR(10),
   CONSTRAINT GENDER_TYPE CHECK(PARENT_GENDER IN('M', 'W')) 
);

SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT;

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '장보고', 30, '경기도 과천', '010-5045-0421', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '홍길동', 37, '서울시 강동', '010-6243-4051', 'M');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '이순신', 50, '서울시 관악', '010-5045-0421', 'W');

INSERT INTO TBL_PARENT(ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER)
VALUES(SEQ_PARENT.NEXTVAL, '이태희', 37, '경기도 과천', '010-5045-0421', 'M');

SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARENT_AGE >= 40 AND PARENT_GENDER = 'W';

/*
 * 
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 * 
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 '%A' : A로 끝나는 모든 값(NDFLSNJFA, 123NFJA, ...)
 'A%' : A로 시작하는 모든 값(AA, ANDKFS, AJD, ...)
 'A__' : A로 시작하며 3글자인 값(ABC, AAA, ADD, ...)
 '_A' : A로 끝나며 2글자인 값(FA, CA, DA, ...)
 '%A%' : A가 포함된 값(APPLE, BANANA, TASK, ...)
 * 
 * */


SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '경기도%';


-- 이름이 희로 끝나는 부모의 데이터를 조회

SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARENT_NAME LIKE '%희';

SELECT ID, PARENT_NAME, PARENT_AGE, PARENT_ADDRESS, PARENT_PHONE, PARENT_GENDER
FROM TBL_PARENT
WHERE PARENT_ADDRESS LIKE '%과천%';

-- 집계 함수
CREATE SEQUENCE SEQ_FIELD_TRIP;
CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_TITLE VARCHAR2(255),
	FIELD_TRIP_CONTENT VARCHAR2(255),
	FIELD_TRIP_NUMBER VARCHAR2(255)
);


INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미 농장', '1번', 20);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '아이스크림 빨리 먹기 대회', '2번', 100);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '고구마 심기 체험', '3번', 10);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '숭어 얼음 낚시', '4번', 80);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '커피 체험 농장 체험', '5번', 60);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '치즈 제작하기', '6번', 5);

INSERT INTO TBL_FIELD_TRIP
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '승마 체험', '7번', 9);

SELECT SUM(FIELD_TROP_NUMBER) AS "총 수용인원"
FROM TBL_FIELD_TRIP;

SELECT ROUND(AVG(FIELD_TROP_NUMBER)) AS "평균 인원" -- 반올림
FROM TBL_FIELD_TRIP;

SELECT FLOOR(AVG(FIELD_TROP_NUMBER)) AS "평균 인원" -- 반올림
FROM TBL_FIELD_TRIP;

SELECT CEIL(AVG(FIELD_TROP_NUMBER)) AS "평균 인원" -- 올림
FROM TBL_FIELD_TRIP;

SELECT * FROM
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_NUMBER > ROUND(AVG(FIELD_TRIP_NUMBER)); -- 안되는 코드
-- 집계함수를 사용할 수 있는 위치
-- 1. SELECT절
-- 2. HAVING절

-- GROUP BY 
-- HAVING

-- '체험 글자를 포함하는 체험학습의 총 인원수 조회'
SELECT SUM(FIELD_TROP_NUMBER) AS "체험 글자를 포함한 체험의 총 인원"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%체험%';

-- 체험학습 제목에 '고구마' 또는 '아이스크림' 들어간 체험 학습의 평균 인원수
SELECT AVG(FIELD_TROP_NUMBER) AS "고구마, 아이스크림의 평균"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%고구마%' OR FIELD_TRIP_TITLE LIKE '%아이스크림%'; -- '고구마|아이스크림'

-- 체험학습 제목이 '기'로 끝나는 체험 학습의 최소 인원수
SELECT MIN(FIELD_TROP_NUMBER) AS "기 로 끝나는 최소값"
FROM TBL_FIELD_TRIP
WHERE FIELD_TRIP_TITLE LIKE '%기';

/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */

CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(255),
	PRODUCT_PRICE NUMBER,
	PRODUCT_STOCK NUMBER
);

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 40);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 30);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 60);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 80);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 10);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 15);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 65);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 5000, 40);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 17);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 1000, 25);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 3000, 25);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 4000, 20);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '배승원의 그램', 2000, 40);

SELECT * FROM TBL_PRODUCT;

-- 1. GROUP BY로 지정한 컬럼만 조회할 수 있다.
-- 2. 그룹 함수를 조회할 수 있다.

-- HAVING 조건절

SELECT PRODUCT_NAME AS "상품명", PRODUCT_PRICE AS "가격", COUNT(ID) AS "개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_NAME, PRODUCT_PRICE;

SELECT PRODUCT_NAME AS "상품명", PRODUCT_PRICE AS "가격", COUNT(ID) AS "개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_NAME, PRODUCT_PRICE
HAVING COUNT(ID) > 2;

SELECT PRODUCT_NAME AS "상품명", PRODUCT_PRICE AS "가격", COUNT(ID) AS "개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_NAME, PRODUCT_PRICE
HAVING AVG(PRODUCT_PRICE) > 2000;

SELECT * FROM TBL_PRODUCT;

-- 1) 가격대별 재고 수
SELECT PRODUCT_PRICE AS "가격대", SUM(PRODUCT_STOCK) || '개' AS "개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_PRICE;

-- 2) 재고가 50개 이상의 개수
SELECT COUNT(ID) AS "재고 50이상 개수"
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK >= 50;

-- 3) 재고가 30개 미만의 상품의 평균 가격
SELECT AVG(PRODUCT_PRICE) AS "재고 30미만 평균가"
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK < 30;

SELECT PRODUCT_PRICE AS "가격대", COUNT(PRODUCT_PRICE) AS "개수", SUM(PRODUCT_PRICE) AS "재고 30미만 상품의 총 가격 합계"
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK < 30
GROUP BY PRODUCT_PRICE
HAVING COUNT(PRODUCT_PRICE) < 2;

-- 가격이 1000, 5000, 3000인 상품만 조회
-- WHERE ~ IN
SELECT *
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE IN ('1000', '5000', '3000');
-- WHERE ~ IN
SELECT SUM(PRODUCT_STOCK) AS "상품명", ROUND(AVG(PRODUCT_PRICE)) || '원' AS "상품별 평균 가격"
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK IN ('15', '20', '25')
GROUP BY PRODUCT_STOCK;

SELECT SUM(PRODUCT_PRICE + PRODUCT_STOCK) AS "모든 상품의 재고와 가격의 합"
FROM TBL_PRODUCT;

SELECT PRODUCT_PRICE AS "가격대" , SUM(PRODUCT_STOCK) AS "재고수", PRODUCT_PRICE * SUM(PRODUCT_STOCK) AS "기대수익" 
FROM TBL_PRODUCT
GROUP BY PRODUCT_PRICE;

SELECT PRODUCT_PRICE AS "가격대", ROUND(10000 / PRODUCT_PRICE) AS "살 수 있는 개수"
FROM TBL_PRODUCT
GROUP BY PRODUCT_PRICE;
